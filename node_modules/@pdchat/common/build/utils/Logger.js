"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Logger = void 0;
const winston_1 = __importDefault(require("winston"));
const config_global_1 = __importDefault(require("../config/config.global"));
class Logger {
    /**
     * Private constructor of the Logger class.
     * @param serviceName The name of the module or component.
     */
    constructor(serviceName) {
        this.serviceName = serviceName;
        this.logger = winston_1.default.createLogger({
            level: config_global_1.default.logs.level,
            format: winston_1.default.format.combine(winston_1.default.format.timestamp({
                format: "YYYY-MM-DD HH:mm:ss",
            }), winston_1.default.format.printf(({ level, message, timestamp }) => {
                return `${timestamp} [${serviceName}] ${level}: ${message}`;
            })),
            transports: [
                new winston_1.default.transports.Console(),
                new winston_1.default.transports.File({
                    filename: "logs/error.log",
                    level: "error",
                }),
                new winston_1.default.transports.File({ filename: "logs/combined.log" }),
            ],
        });
    }
    /**
     * Retrieves the singleton instance of the Logger class.
     * If the instance doesn't exist, it creates a new instance.
     * @param serviceName The name of the module or component.
     * @returns The Logger instance.
     */
    static getInstance(serviceName) {
        if (!Logger.instances[serviceName]) {
            Logger.instances[serviceName] = new Logger(serviceName);
        }
        return Logger.instances[serviceName];
    }
    /**
     * Logs an error message.
     * @param message The error message to be logged.
     */
    error(message) {
        this.logger.error(message);
    }
    /**
     * Logs a warning message.
     * @param message The warning message to be logged.
     */
    warn(message) {
        this.logger.warn(message);
    }
    /**
     * Logs an information message.
     * @param message The information message to be logged.
     */
    info(message) {
        this.logger.info(message);
    }
    /**
     * Logs a debug message.
     * @param message The debug message to be logged.
     */
    debug(message) {
        this.logger.debug(message);
    }
    /**
     * Logs a silly message.
     * @param message The debug message to be logged.
     */
    silly(message) {
        this.logger.silly(message);
    }
}
exports.Logger = Logger;
Logger.instances = {};
