"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.currentUser = void 0;
const jsonwebtoken_1 = __importDefault(require("jsonwebtoken"));
const config_global_1 = __importDefault(require("../config/config.global"));
const Logger_1 = require("../utils/Logger");
const logger = Logger_1.Logger.getInstance(config_global_1.default.servicename);
/**
 * Middleware to check if the current user is authenticated by verifying the JSON Web Token (JWT) stored in the session.
 * If a valid JWT is found, the user payload is extracted and stored in the `req.currentUser` property for further use.
 * If no JWT is found, the middleware simply proceeds to the next middleware or route handler.
 *
 * @param req - The Express.js request object.
 * @param res - The Express.js response object.
 * @param next - The callback function to invoke to pass control to the next middleware or route handler.
 * @returns This function does not have a return value.
 */
const currentUser = (req, res, next) => {
    var _a;
    // Check if a JWT is stored in the session
    if (!((_a = req.session) === null || _a === void 0 ? void 0 : _a.jwt)) {
        return next();
    }
    try {
        // Verify the JWT using the jwtSecret
        const payload = jsonwebtoken_1.default.verify(req.session.jwt, config_global_1.default.jwtSecret);
        // Store the user payload in the request object for future use
        req.currentUser = payload;
    }
    catch (error) {
        logger.error(`Error in currentuser middleware: ${error}`);
    }
    // Proceed to the next middleware or route handler
    next();
};
exports.currentUser = currentUser;
